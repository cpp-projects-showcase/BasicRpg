// //////////////////////////////////////////////////////////////////////
// Import section
// //////////////////////////////////////////////////////////////////////
// STL
#include <stdexcept>
#include <cassert>
#include <sstream>
#include <string>
// Characcters
#include <Character.hpp>

// //////////////////////////////////////////////////////////////////////
Character::Character() : Character("Noname", 0) {
}

// //////////////////////////////////////////////////////////////////////
Character::Character (const std::string& iName, const int& iAge) :
	m_name(iName), m_age(iAge) {
}

// //////////////////////////////////////////////////////////////////////
Character::~Character() {
}

// //////////////////////////////////////////////////////////////////////
const int& Character::getAge() const {
    return m_age;
}

// //////////////////////////////////////////////////////////////////////
const std::string& Character::getName() const {
    return m_name;
}

// //////////////////////////////////////////////////////////////////////
void Character::setAge (const int& iAge) {
    if (iAge < 0 ) {
	    std::ostringstream ostr;
	    ostr << "The given age (" << iAge
             << ") is invalid; it should be positive" << std::endl;
	    const std::string& iErrMsg = ostr.str();
	    throw std::out_of_range (iErrMsg);
    }
    m_age = iAge;
}

// //////////////////////////////////////////////////////////////////////
void Character::setName (const std::string& iName) {
    m_name = iName;
}

// //////////////////////////////////////////////////////////////////////
std::string Character::describe() const {
	std::ostringstream ostr;
	ostr << m_name << " : " << m_age;
	return ostr.str();
}

